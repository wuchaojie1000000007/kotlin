// Time complexity O( m * n ), use dp.

import kotlin.reflect.KProperty

class Memorize<T, R>(val func: (Pair<T, T>) -> R) {
    val cache = mutableMapOf<Pair<T, T>, R>()

    operator fun getValue(thisRef: Any?, property: KProperty<*>) = { (m, n): Pair<T, T> ->
        cache.getOrPut(Pair(m, n)) { func(Pair(m, n)) }
    }
}

val longestCommonSubsequence: (Pair<String, String>) -> Int by Memorize { (m, n) ->
    when{
        m.length == 0 || n.length == 0 ->{0}
        m.last() == n.last() -> {1+
            longestCommonSubsequence(Pair(m.substring(0, m.length-1), n.substring(0, n.length-1)))}
        else ->{
            maxOf(
                longestCommonSubsequence(Pair(m.substring(0, m.length), n.substring(0, n.length-1))),
                longestCommonSubsequence(Pair(m.substring(0, m.length-1), n.substring(0, n.length)))
            )
        }
    }
}

fun main() {

    // 4
    val arr = "AGGTAB"
    val arr2 = "GXTXAYB"
    println(longestCommonSubsequence(Pair(arr, arr2)))

}

fun <T, R> ((T) -> R).memorize(): ((T) -> R) {
    val original = this
    val cache = mutableMapOf<T, R>()

    return { n: T -> cache.getOrPut(n) { original(n) } }
}
